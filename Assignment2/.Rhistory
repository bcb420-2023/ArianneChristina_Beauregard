}
cols <- rainbow(length(counts_density))
ltys <- rep(1, length(counts_density))
# plot the first density plot to initialize the plot
plot(counts_density[[1]], xlim=xlim, ylim=ylim, type="n",
ylab="Smoothing density of log2-CPM",
main="Density plot of TNBC RNA-Seq Samples", cex.lab = 0.85)
# plot each line
for (i in 1:length(counts_density))
lines(counts_density[[i]], col=cols[i], lty=ltys[i])
# create legend
legend("topright", colnames(data2plot),
col=cols, lty=ltys, cex=0.75,
border ="blue",  text.col = "green4",
merge = TRUE, bg = "gray90")
# groups are cell line + timepoint
groups <- mapply(paste, samples$cell.line, samples$timepoint)
# prepare matrix of data
filtered_data_matrix <- as.matrix(exp_filtered[,4:27])
rownames(filtered_data_matrix) <- exp_filtered$SYMBOL
d <- DGEList(counts=filtered_data_matrix, group=groups)
# TMM to calculate norm factors
d <- calcNormFactors(d, method = "TMM")
# normalize counts
norm_counts <- cpm(d, log = TRUE)
# extract spike norms and raw norms
spike_norm_counts <- norm_counts[grepl("^ERCC-", row.names(norm_counts)), ]
raw_norm_counts <- norm_counts[!grepl("^ERCC-", row.names(norm_counts)), ]
# calculate the scaling factor
scaling_factor <- mean(rowSums(raw_norm_counts)) / mean(rowSums(spike_norm_counts))
# apply the scaling factor to the raw norm counts
normalized_counts <- raw_norm_counts * scaling_factor
# plot normalized
# distribution (box plot)
data2plot <- log2(cpm(normalized_counts))
boxplot(data2plot, xlab = "Samples", ylab = "log2 CPM",
las = 2, cex = 0.5, cex.lab = 0.5,
cex.axis = 0.5, main = "TNBC RNA-Seq Samples (TMM normalized)")
# draw the median on each box plot
abline(h = median(apply(data2plot, 2, median, na.rm = TRUE)),
col = "red", lwd = 0.6, lty = "dashed")
# density plot
counts_density <- apply(log2(cpm(normalized_counts)),
2, density, na.rm = TRUE)
# calculate the limits across all the samples
xlim <- 0; ylim <- 0
for (i in 1:length(counts_density)) {
xlim <- range(c(xlim, counts_density[[i]]$x));
ylim <- range(c(ylim, counts_density[[i]]$y))
}
cols <- rainbow(length(counts_density))
ltys <- rep(1, length(counts_density))
# plot the first density plot to initialize the plot
plot(counts_density[[1]], xlim=xlim, ylim=ylim, type="n",
ylab="Smoothing density of log2-CPM",
main="Density plot of TNBC RNA-Seq Samples (TMM normalized)", cex.lab = 0.85)
# plot each line
for (i in 1:length(counts_density))
lines(counts_density[[i]], col=cols[i], lty=ltys[i])
# create legend
legend("topright", colnames(data2plot),
col=cols, lty=ltys, cex=0.75,
border ="blue",  text.col = "green4",
merge = TRUE, bg = "gray90")
plotMDS(d, labels=rownames(samples),
col = c("darkgreen","blue")[factor(samples$cell.line)], main = "Multidimensional Scaling Plot of Samples")
model_design <- model.matrix(~samples$cell.line
+ samples$timepoint)
d <- estimateDisp(d, model_design)
invisible(plotBCV(d, col.tagwise = "black", col.common = "red", main = "BCV Plot of TNBC RNA-Seq data"))
# mean variance relationship
plotMeanVar(d, show.raw.vars = TRUE,
show.tagwise.vars=TRUE,
NBline=TRUE, show.ave.raw.vars = TRUE,
show.binned.common.disp.vars = TRUE,
main = "Mean-Variance Relationship of TNBC RNA-Seq data")
View(normalized_counts)
View(samples)
View(model_design)
View(sfiles)
View(norm_counts)
sample_info <- samples
View(sample_info)
save(normalized_counts, sample_info, file = "GSE155955_data.rda")
save(normalized_counts, sample_info, file = "../data/GSE155955.rda")
load(file = "../data/GSE155955.rda")
load(file = "../data/GSE155955.rda")
View(normalized_counts)
packages <- c("edgeR")
# Check if packages are already installed
# If not, install packages
for(package in packages){
if(!require(package, character.only = TRUE)){
install.packages(package)
}
}
# Load packages
lapply(packages, require, character.only = TRUE)
View(normalized_counts)
if(min(normalized_counts) == 0){
heatmap_col = colorRamp2(c( 0, max(normalized_counts)),
c( "white", "red"))
} else {
heatmap_col = colorRamp2(c(min(normalized_counts), 0,
max(normalized_counts)), c("blue", "white", "red"))
}
packages <- c("edgeR", "ComplexHeatmap", "circlize")
# Check if packages are already installed
# If not, install packages
for(package in packages){
if(!require(package, character.only = TRUE)){
install.packages(package)
}
}
# Load packages
lapply(packages, require, character.only = TRUE)
load(file = "../data/GSE155955.rda")
# normalized_counts: the normalized expression counts
# sample_info: information on samples in normalized_counts
#
kable(normalized_counts[1:5,1:5], type="html")
if(min(normalized_counts) == 0){
heatmap_col = colorRamp2(c( 0, max(normalized_counts)),
c( "white", "red"))
} else {
heatmap_col = colorRamp2(c(min(normalized_counts), 0,
max(normalized_counts)), c("blue", "white", "red"))
}
current_heatmap <- Heatmap(as.matrix(normalized_counts),
show_row_dend = TRUE,show_column_dend = TRUE,
col=heatmap_col,show_column_names = TRUE,
show_row_names = FALSE,show_heatmap_legend = TRUE)
current_heatmap
heatmap_matrix <- t(scale(t(normalized_counts)))
if(min(heatmap_matrix) == 0){
heatmap_col = colorRamp2(c( 0, max(heatmap_matrix)),
c( "white", "red"))
} else {
heatmap_col = colorRamp2(c(min(heatmap_matrix), 0,
max(heatmap_matrix)), c("blue", "white", "red"))
}
current_heatmap <- Heatmap(as.matrix(heatmap_matrix),
show_row_dend = TRUE,show_column_dend = TRUE,
col=heatmap_col,show_column_names = TRUE,
show_row_names = FALSE,show_heatmap_legend = TRUE)
current_heatmap
limma::plotMDS(heatmap_matrix,
col = rep(c("darkgreen","blue"),10))
limma::plotMDS(heatmap_matrix,
col = c("darkgreen","blue")[factor(samples$cell.line)], main = "Multidimensional Scaling Plot of Samples")
d <- DGEList(counts=normalized_counts, group=sampleInfoFromGEO())
d <- DGEList(count=normalized_counts, group=sampleInfoFromGEO())
d <- DGEList(count=normalized_counts, group=sample_info)
d <- DGEList(counts=normalized_counts, group=sample_info)
length(row.names(normalized_counts))
length(unique(row.names(normalized_counts)))
d <- DGEList(counts=heatmap_matrix, group=sample_info)
limma::plotMDS(heatmap_matrix,
col = rep(c("darkgreen","blue"),10))
limma::plotMDS(heatmap_matrix,
col = row.names(heatmap_matrix),10))
limma::plotMDS(heatmap_matrix,
col = row.names(heatmap_matrix),10)
c("darkgreen","blue")[factor(sample_info$cell.line)]
plotMDS(d, labels=rownames(samples),
col = c("darkgreen","blue")[factor(samples$cell.line)], main = "Multidimensional Scaling Plot of Samples")
plotMDS(heatmap_matrix, labels=rownames(samples),
col = c("darkgreen","blue")[factor(samples$cell.line)], main = "Multidimensional Scaling Plot of Samples")
plotMDS(heatmap_matrix, labels=rownames(samples),
col = c("darkgreen","blue")[factor(sample_info$cell.line)], main = "Multidimensional Scaling Plot of Samples")
factor(sample_info$cell.line)
factor(paste(sample_info$cell.line, sample_info$timepoint))
plotMDS(heatmap_matrix, 2labels=rownames(samples),
plotMDS(heatmap_matrix, 2labels=rownames(samples),
plotMDS(heatmap_matrix, labels=rownames(samples),
col = c("darkgreen","blue")[factor(colnames(heatmap_matrix))], main = "Multidimensional Scaling Plot of Samples")
factor(colnames(heatmap_matrix))
plotMDS(heatmap_matrix, labels=rownames(samples),
col = c("darkgreen","blue")[factor(paste(sample_info$cell.line, sample_info$timepoint))], main = "Multidimensional Scaling Plot of Samples")
plotMDS(heatmap_matrix, labels=rownames(samples),
col = c("darkgreen","blue", "red", "yellow", "purple", "pink")[factor(paste(sample_info$cell.line, sample_info$timepoint))], main = "Multidimensional Scaling Plot of Samples")
plotMDS(heatmap_matrix, labels=rownames(samples),
col = c("darkgreen","blue")[factor(sample_info$cell.line, sample_info$timepoint)], main = "Multidimensional Scaling Plot of Samples")
plotMDS(heatmap_matrix, labels=rownames(samples),
col = c("darkgreen","blue")[factor(sample_info$cell.line)], main = "Multidimensional Scaling Plot of Samples")
pat_colors <- rainbow(2)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- rainbow(24)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- rainbow(12)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(sample_info$cell.line, sample_info$timepoint)]
pat_colors <- rainbow(12)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
color <- grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
pat_colors <- color(12)
color <- grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
pat_colors <- sample(color, 12)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- hcl.colors(12, "YlOrRd")
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- diverge_hcl(12)
pat_colors <- colorspace::diverge_hcl(12)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
n_colors <- 12
hues <- seq(15, 375, length.out=n_colors+1)[-1]
chroma <- 80
luminance <- 30
pat_colors <- hcl(h=hues, c=chroma, l=luminance)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
n_colors <- 12
hues <- seq(15, 375, length.out=n_colors+1)[-1]
chroma <- 80
luminance <- 30
pat_colors <- hcl(h=hues, c=chroma, l=luminance)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
n_colors <- 12
hues <- seq(15, 375, length.out=n_colors+1)[-1] *2
chroma <- 100
luminance <- 30
pat_colors <- hcl(h=hues, c=chroma, l=luminance)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
n_colors <- 12
hues <- seq(5, 375, length.out=n_colors+1)[-1] *2
chroma <- 100
luminance <- 30
pat_colors <- hcl(h=hues, c=chroma, l=luminance)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
n_colors <- 12
hues <- seq(0, 260, length.out=n_colors+1)[-1] *2
chroma <- 100
luminance <- 30
pat_colors <- hcl(h=hues, c=chroma, l=luminance)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- hcl(12, c = 100, l = 30)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::diverging_hcl(12, c = 100, l = 30)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- hcl(12, h = c(0, 260), c = 100, l = 30)
pat_colors <- hcl(12, h = 260, c = 100, l = 30)
pat_colors <- colorspace::qualitative_hcl(12, palette = "set2")
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
?qualitative_hcl
pat_colors <- colorspace::qualitative_hcl(12, palette = "Dark 3")
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "Dark 2")
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dynamic")
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2")
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2", l = 30)
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2", l = 30)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2", l = 30)
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2", l = 40)
pat_colors <- unlist(lapply(pat_colors,FUN=function(x){rep(x,2)}))
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2", l = 40)
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2", l = 40)
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2", l = 40)
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2", l = 50)
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2")
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors )
pat_colors <- colorspace::qualitative_hcl(24, palette = "dark2")
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors)
pat_colors <- colorspace::qualitative_hcl(12, palette = "dark2")
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors)
View(heatmap_matrix)
pat_colors <- colorspace::qualitative_hcl(24, palette = "dark2")
pat_colors <- pat_colors[factor(row.names(heatmap_matrix))]
limma::plotMDS(heatmap_matrix,
col = pat_colors)
# define groups
colnames(exp)
samples <- data.frame(lapply(colnames(exp)[4:27],
FUN=function(x){unlist(strsplit(x,
split = "_"))}))
colnames(samples) <- colnames(exp)[4:27]
rownames(samples) <- c("cell.line","timepoint", "replicate")
# define groups
colnames(exp)
samples <- data.frame(lapply(colnames(exp)[4:27],
FUN=function(x){unlist(strsplit(x,
split = "_"))}))
colnames(samples) <- colnames(exp)[4:27]
row.names(samples) <- c("cell.line","timepoint", "replicate")
samples <- data.frame(lapply(colnames(normalized_counts),
FUN=function(x){unlist(strsplit(x,
split = "_"))}))
colnames(samples) <- colnames(exp)[4:27]
rownames(samples) <- c("cell.line","timepoint", "replicate")
samples <- data.frame(t(samples))
kable(samples, caption = "Sample Groups", col.names = c("Cell Line", "Timepoint (min)", "Replicate")) %>%
kable_styling()
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint))
kable(model_design[1:5,], type="html")
View(model_design)
pat_colors <- colorspace::qualitative_hcl(8, palette = "dark2")
pat_colors <- pat_colors[factor(paste(sample_info$cell.line, sample_info$timepoint))]
limma::plotMDS(heatmap_matrix,
col = pat_colors)
groups <- mapply(paste, samples$cell.line, samples$timepoint)
d <- DGEList(counts=normalized_counts, group=groups)
View(heatmap_matrix)
min(normalized_counts)
# TODO: scale the data before saving into RDS and make all positive
changed_normalized_counts <- normalized_counts - (-4.572879)
d <- DGEList(counts=changed_normalized_counts, group=groups)
View(changed_normalized_counts)
min(normalized_counts, na.rm = TRUE)
# TODO: scale the data before saving into RDS and make all positive
changed_normalized_counts <- normalized_counts - (-4.57288)
d <- DGEList(counts=changed_normalized_counts, group=groups)
d <- DGEList(counts=changed_normalized_counts, group=groups)
# Estimate Dispersion - our model design.
d <- estimateDisp(d, model_design_pat)
model_design_pat <- model.matrix(
~ samples$cell.line + samples$timepoint)
kable(model_design_pat[1:5,1:5],type="html")
View(normalized_counts)
View(model_design_pat)
model_design_pat <- model.matrix(
~ samples$cell.line + samples$timepoint)
# Estimate Dispersion - our model design.
d <- estimateDisp(d, model_design)
# Fit the model
fit <- glmQLFit(d, model_design)
View(fit)
fit[["samples"]][["group"]]
View(d)
qlf.pos_vs_neg <- glmQLFTest(fit, coef=2)
kable(topTags(qlf.pos_vs_neg), type="html",row.names = FALSE)
View(model_design)
View(samples)
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint))
View(samples)
model_design <- model.matrix(~ samples$cell.line + samples$timepoint)
View(model_design)
model_design <- model.matrix(~ samples$timepoint)
model_design <- model.matrix(~ samples$cell.line)
View(model_design)
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint) + 0)
View(model_design)
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint))
View(model_design)
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint) + 0)
View(model_design)
View(model_design)
# editing the names to make them more presentable
colnames(model_design) <- gsub("paste(samples$cell.line, samples$timepoint)", "", colnames(model_design))
View(model_design)
gsub("paste(samples$cell.line, samples$timepoint)", "", colnames(model_design))
myvec <- c("apple-fruit", "orange-fruit", "banana-fruit")
# Remove "-fruit" from each element in myvec
myvec_without_fruit <- gsub("-fruit", "", myvec)
# View the updated vector
print(myvec_without_fruit)
colnames( colnames(model_design))
colnames(model_design)
as.vector( colnames(model_design))
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint) + 0)
# editing the names to make them more presentable
test <- gsub("paste(samples$cell.line, samples$timepoint)", "", colnames(model_design))
# editing the names to make them more presentable
test <- gsub("paste(samples$cell.line, samples$timepoint)", "", colnames(model_design))
# editing the names to make them more presentable
lapply(colnames(model_design), function(x) gsub("paste(samples$cell.line, samples$timepoint)", "", x))
# editing the names to make them more presentable
lapply(as.vector(colnames(model_design)), function(x) gsub("paste(samples$cell.line, samples$timepoint)", "", x))
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint) + 0)
rownames(model_design)
colnames(model_design)
colnames(model_design)[1]
gsub("paste(samples$cell.line, samples$timepoint)", "", colnames(model_design)[1])
lapply(colnames(model_design), sub, pattern = "paste(samples$cell.line, samples$timepoint)", replacement = "")
gsub("paste(samples$cell.line, samples$timepoint)", "", as.character(colnames(model_design)[1]))
gsub("paste(samples$cell.line, samples$timepoint)", "", "paste(samples$cell.line, samples$timepoint)MB468 000")
gsub("paste)", "", "paste(samples$cell.line, samples$timepoint)MB468 000")
gsub("paste", "", "paste(samples$cell.line, samples$timepoint)MB468 000")
gsub("[paste(samples$cell.line, samples$timepoint)]", "", "paste(samples$cell.line, samples$timepoint)MB468 000")
test <- gsub("[paste(samples$cell.line, samples$timepoint)]", "", colnames(model_design))
View(model_design)
test
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint) + 0)
colnames(model_design) <- gsub("[paste(samples$cell.line, samples$timepoint)]", "", colnames(model_design))
kable(model_design[1:5,], type="html")
groups <- mapply(paste, samples$cell.line, samples$timepoint)
# TODO: scale the data before saving into RDS and make all positive
changed_normalized_counts <- normalized_counts - (-4.57288)
d <- DGEList(counts=changed_normalized_counts, group=groups)
# Estimate Dispersion - our model design.
d <- estimateDisp(d, model_design)
# Fit the model
fit <- glmQLFit(d, model_design)
qlf.pos_vs_neg <- glmQLFTest(fit, coef=2)
kable(topTags(qlf.pos_vs_neg), type="html",row.names = FALSE)
# Get all the results
qlf_output_hits <- topTags(qlf.pos_vs_neg,sort.by = "PValue",
n = nrow(normalized_count_data))
# Get all the results
qlf_output_hits <- topTags(qlf.pos_vs_neg,sort.by = "PValue",
n = nrow(normalized_counts))
# How many gene pass the threshold p-value < 0.05?
length(which(qlf_output_hits$table$PValue < 0.05))
# How many genes pass correction?
length(which(qlf_output_hits$table$FDR < 0.05))
View(qlf_output_hits)
qlf_output_hits[["table"]][["PValue"]]
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint) + 0)
colnames(model_design) <- gsub("[paste(samples$cell.line, samples$timepoint)]", "", colnames(model_design))
kable(model_design[1:5,], type="html")
groups <- mapply(paste, samples$cell.line, samples$timepoint)
# TODO: scale the data before saving into RDS and make all positive
changed_normalized_counts <- normalized_counts - (-4.57288)
d <- DGEList(counts=changed_normalized_counts, group=groups)
# Estimate Dispersion - our model design.
d <- estimateDisp(d, model_design)
# Fit the model
fit <- glmQLFit(d, model_design)
model_design <- model.matrix(~ paste(samples$cell.line, samples$timepoint) + 0)
# colnames(model_design) <- gsub("[paste(samples$cell.line, samples$timepoint)]", "", colnames(model_design))
kable(model_design[1:5,], type="html")
groups <- mapply(paste, samples$cell.line, samples$timepoint)
# TODO: scale the data before saving into RDS and make all positive
changed_normalized_counts <- normalized_counts - (-4.57288)
d <- DGEList(counts=changed_normalized_counts, group=groups)
# Estimate Dispersion - our model design.
d <- estimateDisp(d, model_design)
# Fit the model
fit <- glmQLFit(d, model_design)
