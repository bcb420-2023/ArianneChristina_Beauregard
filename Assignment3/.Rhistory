show_row_dend = TRUE,show_column_dend = TRUE,
col=heatmap_col,show_column_names = TRUE,
show_row_names = FALSE, show_heatmap_legend = TRUE)
tophits_heatmap
upregulated_MB468 <- row.names(qlf_output_hits_MB468)[(which(qlf_output_hits_MB468$expression ==
"upregulated"))]
upregulated_R8 <- row.names(qlf_output_hits_R8)[(which(qlf_output_hits_R8$expression ==
"upregulated"))]
upregulated <- union(upregulated_MB468, upregulated_R8)
downregulated_MB468 <- row.names(qlf_output_hits_MB468)[(which(qlf_output_hits_MB468$expression ==
"downregulated"))]
downregulated_R8 <- row.names(qlf_output_hits_R8)[(which(qlf_output_hits_R8$expression ==
"downregulated"))]
downregulated <- union(downregulated_MB468, downregulated_R8)
all_degs <- union(upregulated, downregulated)
# number of upregulated genes
length(upregulated)
# number of downregulated genes
length(downregulated)
# number of differentially expressed genes
length(all_degs)
upreg_res <- gost(upregulated, organism = "hsapiens", sources = "GO:BP")
if(is.null(upreg_res)) {
print("No significantly enriched terms")
}
downreg_res <- gost(downregulated, organism = "hsapiens", sources = "GO:BP")
downreg_df <- data.frame(term_id = downreg_res$result$term_id,
term_name = downreg_res$result$term_name,
pval = downreg_res$result$p_value)
kable(downreg_df, caption = "Table 5. Significantly Enriched Terms (Downregulated Genes)", col.names = c("Term ID", "Term Names", "P-value")) %>%
kable_styling()
all_degs_res <- gost(all_degs, organism = "hsapiens", sources = "GO:BP")
all_degs_df <- data.frame(term_id = all_degs_res$result$term_id,
term_name = all_degs_res$result$term_name,
pval = all_degs_res$result$p_value)
kable(all_degs_df, caption = "Table 6. Significantly Enriched Terms (All Differentially Expressed Genes)", col.names = c("Term ID", "Term Names", "P-value")) %>%
kable_styling()
rstudioapi::addTheme("https://raw.githubusercontent.com/dracula/rstudio/master/dracula.rstheme", apply = TRUE)
remotes::install_github("rileytwo/darkstudio")
darkstudio::activate()
darkstudio::activate()
remotes::install_github("rileytwo/darkstudio")
remotes::install_github("rileytwo/darkstudio", force = TRUE)
darkstudio::activate()
darkstudio::deactivate()
darkstudio::activate()
darkstudio::activate( "/Applications/RStudio.app/Contents/Resources/www/index.htm")
darkstudio::activate()
load("../data/A2_data.rda")
# view data
kable(head(qlf_output_hits_MB468), type="html", caption = "Table 1. Head of ranked list for cell line MDA-MB-468") %>%
kable_styling()
# all required packages
# TODO: change!!
bioc <- c("ComplexHeatmap", "edgeR", "limma")
cran <- c("knitr", "kableExtra", "circlize", "ggplot2", "dplyr", "gprofiler2")
# install BiocManager if needed
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# install bioconductor packages if necessary
for (package in bioc) {
if (!require(package, character.only = TRUE)) {
BiocManager::install(package)
require(package)
}
}
# install cran packages if necessary
for(package in cran) {
if(!require(package, character.only = TRUE)){
install.packages(package)
require(package)
}
}
load("../data/A2_data.rda")
# view data
kable(head(qlf_output_hits_MB468), type="html", caption = "Table 1. Head of ranked list for cell line MDA-MB-468") %>%
kable_styling()
kable(head(qlf_output_hits_R8), type="html", caption = "Table 1. Head of ranked list for cell line MDA-MB-468res-R8") %>%
kable_styling()
View(qlf_output_hits_MB468)
# MDA-MB-468
qlf_output_hits_MB468$rank <- log(qlf_output_hits_MB468$PValue, base = 10) * sign(qlf_output_hits_MB468$logFC)
qlf_output_hits_MB468 <- qlf_output_hits_MB468[order(qlf_output_hits_MB468$rank), ]
View(qlf_output_hits_MB468)
# MDA-MB-468
qlf_output_hits_MB468$rank <- log(qlf_output_hits_MB468$PValue, base = 10) * sign(qlf_output_hits_MB468$logFC)
qlf_output_hits_MB468 <- qlf_output_hits_MB468[order(qlf_output_hits_MB468$rank), ]
# MDA-MB-468res-R8
qlf_output_hits_R8$rank <- log(qlf_output_hits_R8$PValue, base = 10) * sign(qlf_output_hits_R8$logFC)
qlf_output_hits_R8 <- qlf_output_hits_R8[order(qlf_output_hits_R8$rank), ]
View(qlf_output_hits_R8)
ranked_list_MB468 <- data.frame(gene = row.names(qlf_output_hits_MB468),
rank = qlf_output_hits_MB468$rank)
View(ranked_list_MB468)
ranked_list_R8 <- data.frame(gene = row.names(qlf_output_hits_R8),
rank = qlf_output_hits_R8$rank)
# MDA-MB-468
qlf_output_hits_MB468$rank <- log(qlf_output_hits_MB468$PValue, base = 10) * sign(qlf_output_hits_MB468$logFC)
qlf_output_hits_MB468 <- qlf_output_hits_MB468[order(qlf_output_hits_MB468$rank), ]
ranked_list_MB468 <- data.frame(GeneName = row.names(qlf_output_hits_MB468),
Rank = qlf_output_hits_MB468$rank)
# MDA-MB-468res-R8
qlf_output_hits_R8$rank <- log(qlf_output_hits_R8$PValue, base = 10) * sign(qlf_output_hits_R8$logFC)
qlf_output_hits_R8 <- qlf_output_hits_R8[order(qlf_output_hits_R8$rank), ]
ranked_list_R8 <- data.frame(GeneName = row.names(qlf_output_hits_R8),
Rank = qlf_output_hits_R8$rank)
# export
# export
write.table(ranked_list_MB468, "../data/ranked_list_MB468.txt")
# export
write.table(ranked_list_MB468, "../data/ranked_list_MB468.txt",
row.names = FALSE, quote = FALSE)
# export
write.table(ranked_list_MB468, "../data/ranked_list_MB468.txt",
sep = "\t", row.names = FALSE, quote = FALSE)
write.table(ranked_list_R8, "../data/ranked_list_R8.txt",
sep = "\t", row.names = FALSE, quote = FALSE)
# export
write.table(ranked_list_MB468, "../data/ranked_list_MB468.rnk.txt",
sep = "\t", row.names = FALSE, quote = FALSE)
write.table(ranked_list_R8, "../data/ranked_list_R8.rnk.txt",
sep = "\t", row.names = FALSE, quote = FALSE)
setwd("~/Desktop/DrugVIPER/code")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(SummarizedExperiment)
library(miscTools)
library(corrplot)
library(reshape2)
library(ggvenn)
library(PharmacoGx)
library(gridExtra)
library(AnnotationGx)
############################################################
## Remove genes if with expression zero in 50% of sample
############################################################
## remove genes with at least 50% of no expression across
## NOTE: figure out what is the most appropriate threshold for your case
rem <- function(x){
x <- as.matrix(x)
x <- t(apply(x,1,as.numeric))
# data is log2(TPM+0.001)
r <- as.numeric(apply(x, 1, function(i) sum(round(i, 6) == round(log2(0.001), 6)) ))
remove <- which(r > dim(x)[2]*0.5) # should be 0.5 or less or more for our data?
return(remove)
}
CCLE_RPPA_SE <- readRDS("../results/CCLE_RPPA_SE.rds")
CCLE_RNAseq_SE <- readRDS("CCLE_RNAseq.rds")
MCLP_RPPA_SE <- readRDS("../results/MCLP_RPPA_SE.rds")
gCSI_RNAseq_SE <- readRDS("gCSI_RNAseq.rds")
# Note: replacing CCLE_RNAseq_SE and gCSI_RNAseq_SE with local downloads (downloading timeouts)
# CCLE <- downloadPSet("CCLE_2015")
# gCSI <- downloadPSet("gCSI_2019")
# CCLE_RNAseq_SE <- summarizeMolecularProfiles(CCLE, mDataType="Kallisto_0.46.1.rnaseq", fill.missing = FALSE)
# gCSI_RNAseq_SE <- summarizeMolecularProfiles(gCSI, mDataType="Kallisto_0.46.1.rnaseq", fill.missing = FALSE)
# Extracting assay, cell annotation and gene annotation data
ccle_rppa_exp <- assay(CCLE_RPPA_SE)
ccle_rppa_gene_annot <- rowData(CCLE_RPPA_SE)
ccle_rppa_cell_annot <- as.data.frame(colData(CCLE_RPPA_SE))
ccle_rnaseq_exp <- assay(CCLE_RNAseq_SE)
ccle_rnaseq_gene_annot <- rowData(CCLE_RNAseq_SE)
ccle_rnaseq_cell_annot <- as.data.frame(colData(CCLE_RNAseq_SE))
mclp_rppa_exp <- assay(MCLP_RPPA_SE)
mclp_rppa_gene_annot <- rowData(MCLP_RPPA_SE)
mclp_rppa_cell_annot <- as.data.frame(colData(MCLP_RPPA_SE))
gcsi_rnaseq_exp <- assay(gCSI_RNAseq_SE)
gcsi_rnaseq_gene_annot <- rowData(gCSI_RNAseq_SE)
gcsi_rnaseq_cell_annot <- as.data.frame(colData(gCSI_RNAseq_SE))
# small fix for tissue types in MCLP RPPA (make the blank ones NA)
mclp_rppa_cell_annot[mclp_rppa_cell_annot == ""] <- NA
# keeping protein-coding genes
ccle_rnaseq_exp <- ccle_rnaseq_exp[ccle_rnaseq_gene_annot$gene_type == "protein_coding", ]
ccle_rnaseq_gene_annot <- ccle_rnaseq_gene_annot[ccle_rnaseq_gene_annot$gene_type == "protein_coding", ]
gcsi_rnaseq_exp <- gcsi_rnaseq_exp[gcsi_rnaseq_gene_annot$gene_type == "protein_coding", ]
gcsi_rnaseq_gene_annot <- gcsi_rnaseq_gene_annot[gcsi_rnaseq_gene_annot$gene_type == "protein_coding", ]
# removing genes with names including "PAR-Y"
ccle_rnaseq_exp <- ccle_rnaseq_exp[!grepl("PAR-Y", ccle_rnaseq_gene_annot$gene_id), ]
ccle_rnaseq_gene_annot<- ccle_rnaseq_gene_annot[!grepl("PAR-Y", ccle_rnaseq_gene_annot$gene_id), ]
gcsi_rnaseq_exp <- gcsi_rnaseq_exp[!grepl("PAR-Y", gcsi_rnaseq_gene_annot$gene_id), ]
gcsi_rnaseq_gene_annot<- gcsi_rnaseq_gene_annot[!grepl("PAR-Y", gcsi_rnaseq_gene_annot$gene_id), ]
# get indices of rows to remove
ccle_rem <- rem(ccle_rnaseq_exp)
gcsi_rem <- rem(gcsi_rnaseq_exp)
ccle_rnaseq_exp <- ccle_rnaseq_exp[-ccle_rem, ]
ccle_rnaseq_gene_annot <- ccle_rnaseq_gene_annot[-ccle_rem, ]
gcsi_rnaseq_exp <- gcsi_rnaseq_exp[-gcsi_rem, ]
gcsi_rnaseq_gene_annot <- gcsi_rnaseq_gene_annot[-gcsi_rem, ]
total_cell = length(ccle_rppa_cell_annot$tissueid)  # total number of samples
ggplot(ccle_rppa_cell_annot, aes(x = fct_infreq(tissueid))) +
geom_bar(stat="count", fill = "#0073C2FF") +
theme(axis.text.x = element_text(angle = 90, size = 10)) +
ylim(0, 180) +
ggtitle("Tissue Types of Cell Lines in CCLE RPPA") + xlab("Tissue") + ylab("Number of Cell Lines") +
geom_text(x = 20, y = 150, label = paste("Number of cell lines:", total_cell))+
geom_text(stat = "count",
aes(label = paste(after_stat(count), paste("(", round((after_stat(count)/total_cell * 100), digits = 1), "%)", sep = ""), sep = "\n")),
vjust = -0.2,
size = 2)
total_cell = length(ccle_rnaseq_cell_annot$tissueid)  # total number of samples
ggplot(ccle_rnaseq_cell_annot, aes(x = fct_infreq(tissueid))) +
geom_bar(stat="count", fill = "#4F7942") +
theme(axis.text.x = element_text(angle = 90, size = 10)) +
ylim(0, 200) +
ggtitle("Tissue Types of Cell Lines in CCLE RNA-seq") + xlab("Tissue") + ylab("Number of Cell Lines") +
geom_text(x = 20, y = 150, label = paste("Number of cell lines:", total_cell))+
geom_text(stat = "count",
aes(label = paste(after_stat(count), paste("(", round((after_stat(count)/total_cell * 100), digits = 1), "%)", sep = ""), sep = "\n")),
vjust = -0.2,
size = 2)
total_cell = length(mclp_rppa_cell_annot$tissueid)  # total number of samples
ggplot(mclp_rppa_cell_annot, aes(x = fct_infreq(tissueid))) +
geom_bar(stat="count", fill = "#868686FF") +
theme(axis.text.x = element_text(angle = 90, size = 10)) +
ylim(0, 150) +
ggtitle("Tissue Types of Cell Lines in MCLP RPPA") + xlab("Tissue") + ylab("Number of Cell Lines") +
geom_text(x = 18, y = 120, label = paste("Number of cell lines:", total_cell))+
geom_text(stat = "count",
aes(label = paste(after_stat(count), paste("(", round((after_stat(count)/total_cell * 100), digits = 1), "%)", sep = ""), sep = "\n")),
vjust = -0.2,
size = 2)
View(gcsi_rnaseq_cell_annot)
total_cell = length(gcsi_rnaseq_cell_annot$tissueid)  # total number of samples
ggplot(gcsi_rnaseq_cell_annot, aes(x = fct_infreq(tissueid))) +
geom_bar(stat="count", fill = "#CD534CFF") +
theme(axis.text.x = element_text(angle = 90, size = 10)) +
ylim(0, 160) +
ggtitle("Tissue Types of Cell Lines in gCSI RNA-seq") + xlab("Tissue") + ylab("Number of Cell Lines") +
geom_text(x = 20, y = 140, label = paste("Number of cell lines:", total_cell))+
geom_text(stat = "count",
aes(label = paste(after_stat(count), paste("(", round((after_stat(count)/total_cell * 100), digits = 1), "%)", sep = ""), sep = "\n")),
vjust = -0.2,
size = 2)
samples <- list(
"CCLE RPPA" = ccle_rppa_cell_annot$sampleid,
"CCLE RNA-seq" = ccle_rnaseq_cell_annot$sampleid,
"MCLP RPPA" = mclp_rppa_cell_annot$sampleid,
"gCSI RNA-seq" = gcsi_rnaseq_cell_annot$sampleid
)
mycol = c("#0073C2FF", "#4F7942", "#868686FF", "#CD534CFF")
# all
p1 <- ggvenn(
samples,
fill_color = mycol,
stroke_size = 0.5, set_name_size = 2.5,
text_size = 2.2
)
# ccle rppa vs ccle rna-seq
p2 <- ggvenn(
samples[1:2],
fill_color = c("#0073C2FF", "#4F7942"),
stroke_size = 0.5, set_name_size = 2.5,
text_size = 2.2
)
# mclp rppa vs gcsi rna-seq
p3 <- ggvenn(
samples[3:4],
fill_color = c("#868686FF", "#CD534CFF"),
stroke_size = 0.5, set_name_size = 2.5,
text_size = 2.2
)
p4 <- arrangeGrob(p2, p3, nrow = 2)
grid.arrange(
p1, p4, nrow = 1, top = "Overlap of Cell Lines", widths = c(2, 1)
)
# ccle rppa
to_keep <- !(ccle_rppa_cell_annot$tissueid  %in% c("Lymphoid", "Myeloid"))
# remove rows in cell annot, remove columns in exp
ccle_rppa_cell_annot <- ccle_rppa_cell_annot[to_keep, ]
ccle_rppa_exp <- ccle_rppa_exp[, to_keep]
# ccle rnaseq
to_keep <- !(ccle_rnaseq_cell_annot$tissueid  %in% c("Lymphoid", "Myeloid"))
# remove rows in cell annot, remove columns in exp
ccle_rnaseq_cell_annot <- ccle_rnaseq_cell_annot[to_keep, ]
ccle_rnaseq_exp <- ccle_rnaseq_exp[, to_keep]
# mclp rppa
to_keep <- !(mclp_rppa_cell_annot$tissueid  %in% c("Lymphoid", "Myeloid"))
# remove rows in cell annot, remove columns in exp
mclp_rppa_cell_annot <- mclp_rppa_cell_annot[to_keep, ]
mclp_rppa_exp <- mclp_rppa_exp[, to_keep]
# gcsi rnaseq
to_keep <- !(gcsi_rnaseq_cell_annot$tissueid  %in% c("Lymphoid", "Myeloid"))
# remove rows in cell annot, remove columns in exp
gcsi_rnaseq_cell_annot <- gcsi_rnaseq_cell_annot[to_keep, ]
gcsi_rnaseq_exp <- gcsi_rnaseq_exp[, to_keep]
sum(is.na(ccle_rppa_exp))
sum(is.na(ccle_rnaseq_exp))
sum(is.na(gcsi_rnaseq_exp))
# number of missing values in each row
na_rows <- rowSums(is.na(mclp_rppa_exp))
# percent of missing values per protein
percentage <- (na_rows / ncol(mclp_rppa_exp)) * 100
# TODO: add percentage?
hist(percentage,
main = "MCLP RPPA: Distribution of Missing Expression Values by Proteins",
xlab = "Percentage missing (%)",
ylab = "Number of proteins",
labels = TRUE,
xlim = c(0, 100),
ylim=c(0,200))
common_cell_lines <- intersect(ccle_rnaseq_cell_annot$sampleid, ccle_rppa_cell_annot$sampleid)
# prepare subsets with common cell lines
ccle_rnaseq_cell_annot_common <- ccle_rnaseq_cell_annot[match(common_cell_lines, ccle_rnaseq_cell_annot$sampleid), ]
ccle_rnaseq_exp_common_samples <- ccle_rnaseq_exp[, common_cell_lines]
ccle_rppa_cell_annot_common <- ccle_rppa_cell_annot[match(common_cell_lines, ccle_rppa_cell_annot$sampleid), ]
ccle_rppa_exp_common_samples <- ccle_rppa_exp[, common_cell_lines]
# plot
ggplot(ccle_rnaseq_cell_annot_common, aes(x = fct_infreq(tissueid))) +
geom_bar(stat="count", aes(fill = ifelse(after_stat(count) >= 20, ">=20", "<20"))) +
scale_fill_manual(values=c("dimgrey","firebrick")) +
theme(axis.text.x = element_text(angle = 90, size = 10), legend.position = "none") +
ylim(0, 180) +
ggtitle("Tissue Types of Common Cell Lines between CCLE RPPA and RNA-seq") + xlab("Tissue") + ylab("Number of Cell Lines") +
geom_text(x = 18, y = 120, label = paste("Number of cell lines:", length(common_cell_lines))) +
geom_text(stat = "count",
aes(label = paste(after_stat(count), paste("(", round((after_stat(count)/length(common_cell_lines) * 100), digits = 1), "%)", sep = ""), sep = "\n")),
vjust = -0.2,
size = 2)
View(ccle_rnaseq_exp)
View(ccle_rppa_exp)
View(gcsi_rnaseq_exp)
View(mclp_rppa_exp)
knitr::opts_chunk$set(echo = TRUE)
load(file = "../Data/Analysis_Tasks_common.rda")
load(file = "../Data/VIPER_Tasks_data.rda")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(plyr)
library(miscTools)
library(reshape2)
library(ggvenn)
library(gridExtra)
library(PharmacoGx)
library(writexl)
library(forestplot)
library(ggrepel)
############################################################
## Drug response correlation
############################################################
# Returns df with cols drug, gene, correlation, df, pvalue
drug_response_corr <- function(aac, exp) {
# get common cell lines
common_cell_lines <- intersect(colnames(aac), colnames(exp))
print(paste(length(common_cell_lines), "cell lines in common."))
aac_common <- aac[, common_cell_lines]
exp_common <- exp[, common_cell_lines]
# correlation
drugs <- rownames(aac_common)
genes <- rownames(exp_common)
# store results
cor_df <- matrix(nrow = 0, ncol = 8)
colnames(cor_df) <- c("drug", "gene", "correlation", "df", "pvalue", "lower", "upper", "fdr")
for (j in seq_along(drugs)) {
drug_cor_df <- matrix(nrow = 0, ncol = 7)
colnames(drug_cor_df) <- c("drug", "gene", "correlation", "df", "pvalue", "lower", "upper")
for (k in seq_along(genes)) {
tryCatch({
# TODO: some correlations don't produce conf.int bc too few comparisons
fit <- cor.test(as.numeric(aac_common[j, ]),
as.numeric(exp_common[k, ]),
method = "pearson")
if (fit$parameter > 1) {
# add confidence interval
new_row <- c(drugs[j], genes[k], fit$estimate,
fit$parameter, fit$p.value, fit$conf.int)
} else {
# no conf int -> NA
new_row <- c(drugs[j], genes[k], fit$estimate,
fit$parameter, fit$p.value, NA, NA)
}
drug_cor_df <- rbind(drug_cor_df, new_row)
}, error = function(e) {
e$message <- paste(e$message, "(for drug index", j, "and exp index", k, ")")
})
}
drug_cor_df <- as.data.frame(drug_cor_df)
drug_cor_df$fdr <- p.adjust(as.numeric(drug_cor_df$pvalue), "fdr")
cor_df <- rbind(cor_df, drug_cor_df)
}
cor_df <- as.data.frame(cor_df)
rownames(cor_df) <- NULL
return(cor_df)
}
vol_plot <- function(drug, cor_res, label) {
cor_res_drug <- cor_res[cor_res$drug == drug, ]
cor_res_drug$Significance <- "Not significant"
# if  fdr < 0.05, set as significant
cor_res_drug$Significance[cor_res_drug$fdr < 0.05] <- "Significant (FDR < 0.05)"
# define which ones to label
cor_res_drug$label <- "no"
cor_res_drug$label[head(order(cor_res_drug$fdr), n = 10)] <- "yes"
# make sure only significant ones can get label
cor_res_drug$label[cor_res_drug$fdr >= 0.05] <- "no"
p <- ggplot(data=cor_res_drug, aes(x=as.numeric(correlation), y=-log10(as.numeric(pvalue))), label = gene) +
geom_point(aes(color = Significance)) +
geom_text_repel(aes(label=ifelse(label == "yes",as.character(gene),'')),hjust=0,vjust=0,
size = 2) +
xlab(expression("Pearson correlation coefficient")) +
ylab(expression("-log"[10]*"P-value")) +
ggtitle(label) +
#scale_x_continuous(limits = c(-1, 1)) +
scale_color_manual(values = c("dimgrey", "purple"))
theme_minimal()
# Add lines as before...
p2 <- p + geom_hline(yintercept=-log10(0.05), col="darkgrey", linetype = "dashed") +
geom_vline(xintercept = -0.2, col ="darkgrey", linetype = "dashed") +
geom_vline(xintercept = 0.2, col ="darkgrey", linetype = "dashed")
return(p2)
}
for_plot <- function(drug, gene, rnaseq, rppa, viper) {
rnaseq_dg <- rnaseq[rnaseq$drug == drug & rnaseq$gene == gene, ]
rnaseq_dg$study <- "RNA-Seq"
rppa_dg <- rppa[rppa$drug == drug & rppa$gene == gene, ]
rppa_dg$study <- "RPPA"
viper_dg <- viper[viper$drug == drug & viper$gene == gene, ]
viper_dg$study <- "VIPER"
base_data <- rbind(rnaseq_dg, rppa_dg, viper_dg)
base_data$mean <- round(as.numeric(base_data$correlation), 2)
base_data$lower <- round(as.numeric(base_data$lower), 2)
base_data$upper <- round(as.numeric(base_data$upper), 2)
base_data$pvalue <- round(as.numeric(base_data$pvalue), 2)
base_data$fdr <- round(as.numeric(base_data$fdr), 2)
p <- base_data |>
mutate(est = sprintf("%.2f", mean), .after = study) |>
forestplot(labeltext = c(study, est, pvalue, fdr, df),
title = paste(drug, gene, sep = "/"),
clip = c(-1,1),
line.margin = .1,
xlab = "Pearson Correlation",
boxsize = 0.2) |>
fp_add_header(est = "r",
study = "Study",
pvalue = "P-value",
fdr = "FDR",
df = "df") |>
fp_set_style(box = "lightblue",
line = "grey30")
return(p)
}
cor_all_data <- function(rnaseq, rppa, viper) {
# scale all
rnaseq <- scale(rnaseq)
rppa <- scale(rppa)
viper <- scale(viper)
cor_df <- data.frame(feature = character(),
cor_val = numeric(),
pval = numeric(),
type = character())
# rnaseq rppa
genes <- rownames(rnaseq)
cor_res <- lapply(1:length(genes), function(k){
fit <- cor.test(as.numeric(rnaseq[rownames(rnaseq) == genes[k], ]),
as.numeric(rppa[rownames(rppa) == genes[k], ]),
method = "pearson",
exact = FALSE)
data.frame(feature = genes[k],
cor_val = fit$estimate,
pval = p.adjust(fit$p.value, "fdr"))
})
cor_gene_res <- do.call(rbind, cor_res)
cor_gene_res$type <- "RNA-Seq vs RPPA"
cor_df <- rbind(cor_df, cor_gene_res)
# rnaseq viper
genes <- rownames(rnaseq)
cor_res <- lapply(1:length(genes), function(k){
fit <- cor.test(as.numeric(rnaseq[rownames(rnaseq) == genes[k], ]),
as.numeric(viper[rownames(viper) == genes[k], ]),
method = "pearson",
exact = FALSE)
data.frame(feature = genes[k],
cor_val = fit$estimate,
pval = p.adjust(fit$p.value, "fdr"))
})
cor_gene_res <- do.call(rbind, cor_res)
cor_gene_res$type <- "RNA-Seq vs VIPER"
cor_df <- rbind(cor_df, cor_gene_res)
# rppa viper
genes <- rownames(rppa)
cor_res <- lapply(1:length(genes), function(k){
fit <- cor.test(as.numeric(rppa[rownames(rppa) == genes[k], ]),
as.numeric(viper[rownames(viper) == genes[k], ]),
method = "pearson",
exact = FALSE)
data.frame(feature = genes[k],
cor_val = fit$estimate,
pval = p.adjust(fit$p.value, "fdr"))
})
cor_gene_res <- do.call(rbind, cor_res)
cor_gene_res$type <- "RPPA vs VIPER"
cor_df <- rbind(cor_df, cor_gene_res)
p_meds <- ddply(cor_df, .(type), summarise, med = round(median(cor_val), digits = 4))
p <- ggplot(cor_df, aes(x = type, y = cor_val)) +
geom_boxplot(color = "black") +
labs(x = "Data", y = "Pearson Correlation Value") +
geom_text(data = p_meds, aes(x = type, y = med, label = paste("median =", med)),
size = 3, vjust = -1.5)+
theme(axis.text.x = element_text(size = 8), legend.position = "none")
return(p)
}
## code to download from PharmacoGx
# gcsi <- downloadPSet("gCSI_2019")
# ctrp <- downloadPSet("CTRPv2_2015")
# downloaded from orcestra
gcsi <- updateObject(readRDS("../Data/gCSI2.rds"))
ctrp <- updateObject(readRDS("../Data/CTRPv2.rds"))
aac_gcsi <- summarizeSensitivityProfiles(gcsi, sensitivity.measure = "aac_recomputed")
aac_ctrp <- summarizeSensitivityProfiles(ctrp, sensitivity.measure = "aac_recomputed")
View(aac_ctrp)
View(aac_gcsi)
setwd("~/Desktop/ArianneChristina_Beauregard/Assignment3")
